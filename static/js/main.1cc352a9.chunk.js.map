{"version":3,"sources":["components/Square/index.js","components/Rows/index.js","components/TictoctoeApp/index.js","App.js","reportWebVitals.js","index.js"],"names":["Square","handleClickSquare","idRow","idCol","square","className","onClick","Rows","rows","map","TictoctoeApp","useState","dataRows","setDataRows","statusSquare","setStatusSquare","winer","setWiner","clearData","setClearData","useEffect","row","allRows","alert","newDataRows","checkWin","checkRow","checkCol","cheo1","index","cal1","cheo2","cal2","checkWinX","checkWinO","arrCheck","indexX","logicCheck","str","scoreCheck","i","j","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1cc352a9.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Square.css\";\n\nexport default function Square({ handleClickSquare, idRow, idCol, square }) {\n  return (\n    <button className=\"square\" onClick={() => handleClickSquare(idRow, idCol)}>\n      {square}\n    </button>\n  );\n}\n","import React from \"react\";\nimport Square from \"../Square\";\nimport \"./Rows.css\";\n\nexport default function Rows({ rows, handleClickSquare, idRow }) {\n  //   console.log(rows);\n  return (\n    <div className=\"rows\">\n      {rows &&\n        rows.map((square, idCol) => {\n          return (\n            <Square\n              key={idCol}\n              idCol={idCol}\n              idRow={idRow}\n              square={square}\n              handleClickSquare={handleClickSquare}\n            />\n          );\n        })}\n    </div>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport Rows from \"../Rows\";\n\nexport default function TictoctoeApp() {\n  const [dataRows, setDataRows] = useState([]);\n  const [statusSquare, setStatusSquare] = useState(1);\n  const [winer, setWiner] = useState(0);\n  const [clearData, setClearData] = useState(true);\n\n  useEffect(() => {\n    if (clearData) {\n      const row = [null, null, null, null, null, null, null, null, null, null];\n      const allRows = [\n        [...row],\n        [...row],\n        [...row],\n        [...row],\n        [...row],\n        [...row],\n        [...row],\n        [...row],\n        [...row],\n        [...row],\n      ];\n      setDataRows(allRows);\n      setClearData(false);\n    }\n  }, [clearData]);\n\n  useEffect(() => {\n    if (winer) {\n      alert(`${winer} thang cuoc`);\n      setClearData(true);\n    }\n  }, [winer]);\n\n  const handleClickSquare = (idRow, idCol) => {\n    const newDataRows = [...dataRows];\n    let dataSquare = newDataRows[idRow][idCol];\n\n    if (!dataSquare) {\n      if (statusSquare === 1) {\n        newDataRows[idRow][idCol] = \"X\";\n        setStatusSquare(2);\n        checkWin(idRow, idCol);\n      } else {\n        newDataRows[idRow][idCol] = \"O\";\n        setStatusSquare(1);\n        checkWin(idRow, idCol);\n      }\n    } else {\n      return;\n    }\n    setDataRows(newDataRows);\n  };\n\n  const checkWin = (idRow, idCol) => {\n    setWiner(0);\n    const checkRow = dataRows[idRow];\n    const checkCol = dataRows.map((rows) => {\n      return rows[idCol];\n    });\n\n    function cal1(rows, index) {\n      if (index === idRow) return rows[idCol];\n      if (index < idRow) return rows[index + idCol - idRow];\n      if (index > idRow) return rows[index + idCol - idRow];\n    }\n\n    function cal2(rows, index) {\n      if (index === idRow) return rows[idCol];\n      if (index < idRow) return rows[idCol + idRow - index];\n      if (index > idRow) return rows[idCol + idRow - index];\n    }\n\n    const cheo1 = dataRows.map((rows, index) => {\n      return cal1(rows, index);\n    });\n\n    const cheo2 = dataRows.map((rows, index) => {\n      return cal2(rows, index);\n    });\n\n    checkWinX(checkRow);\n    checkWinX(checkCol);\n    checkWinX(cheo1);\n    checkWinX(cheo2);\n    checkWinO(checkRow);\n    checkWinO(checkCol);\n    checkWinO(cheo1);\n    checkWinO(cheo2);\n  };\n\n  const checkWinX = (arrCheck) => {\n    const indexX = arrCheck.map((square, index) => {\n      return square === \"X\" ? index : null;\n    });\n    logicCheck(indexX, \"X\");\n  };\n\n  const checkWinO = (arrCheck) => {\n    const indexX = arrCheck.map((square, index) => {\n      return square === \"O\" ? index : null;\n    });\n    logicCheck(indexX, \"O\");\n  };\n\n  const logicCheck = (arrCheck, str) => {\n    let scoreCheck = 1;\n    for (let i = 0; i < 10; i++) {\n      for (let j = i; j < i + 5; j++) {\n        if (scoreCheck < 5) {\n          if (arrCheck[j] === arrCheck[j + 1] - 1) {\n            scoreCheck = scoreCheck + 1;\n          } else {\n            scoreCheck = 0;\n          }\n        }\n      }\n    }\n    if (scoreCheck === 5) {\n      setWiner(str);\n    }\n  };\n\n  return (\n    <div>\n      <h1>hello</h1>\n      {dataRows.map((rows, idRow) => {\n        return (\n          <Rows\n            key={idRow}\n            idRow={idRow}\n            rows={rows}\n            handleClickSquare={handleClickSquare}\n          />\n        );\n      })}\n    </div>\n  );\n}\n","import \"./App.css\";\nimport TictoctoeApp from \"./components/TictoctoeApp\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TictoctoeApp />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}